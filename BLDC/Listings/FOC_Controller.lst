C251 COMPILER V5.60.0,  FOC_Controller                                                     01/03/25  15:57:30  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE FOC_Controller
OBJECT MODULE PLACED IN .\Objects\FOC_Controller.obj
COMPILER INVOKED BY: D:\mcu\Keil5\C251\BIN\C251.EXE FOC_Controller.c XSMALL INTR2 BROWSE DEBUG PRINT(.\Listings\FOC_Cont
                    -roller.lst) OBJECT(.\Objects\FOC_Controller.obj) 

stmt  level    source

    1          #include <AI8051U.H>
    2          #include <intrins.h>
    3          #include <math.h>
    4          #include "PWM_Controller.h"
    5          #include "Lowpass_Filter.h"
    6          
    7          #define PI 3.14159265358979323846 //Ëøô‰πàÈïøÊÄé‰πà‰Ω†‰∫ÜÔºÅ
    8          
    9          #define _constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))
   10          
   11          #pragma region Motor_Parameters
*** WARNING C2 IN LINE 11 OF FOC_Controller.c: 'REGION': unknown #pragma/control, line ignored
   12          float voltage_power_supply = 12;//12v??
   13          double Electric_Angle;
   14          double Shaft_Angle;
   15          double Initial_Angle = 0; //ÊúâÂèØËÉΩËΩ¨Â≠ê‰∏çÂú®0Â∫¶‰ΩçÁΩÆÔºåÊâÄ‰ª•ÈúÄË¶Å‰∏Ä‰∏™ÂàùÂßãËßíÂ∫¶
   16          double Ualpha;
   17          double Ubeta;
   18          double Ua;
   19          double Ub;
   20          double Uc;
   21          double DC_a;
   22          double DC_b;
   23          double DC_c;
   24          double Uq;
   25          #pragma endregion
*** WARNING C2 IN LINE 25 OF FOC_Controller.c: 'ENDREGION': unknown #pragma/control, line ignored
   26          
   27          float Ts = 0.001; //1ms Á≥ªÁªüÊó∂Èó¥Èó¥Èöî
   28          
   29          double _electric_Angle(double shaft_angle, int pole_pairs) //ÁîµÊú∫ÁöÑÁîµËßíÂ∫¶ = Êú∫Ê¢∞ËßíÂ∫¶ * ÊûÅÂØπÊï
             -∞
   30          {
   31   1          return shaft_angle * pole_pairs;
   32   1      }
   33          
   34          double _normalizeAngle(double angle) //ÊéßÂà∂Âú®0~2œÄ‰πãÈó¥ LOL
   35          {
   36   1          while(angle > 2*PI)
   37   1          {
   38   2              angle -= 2*PI;
   39   2          }
   40   1          while(angle < 0)
   41   1          {
   42   2              angle += 2*PI;
   43   2          }
   44   1          return angle;
   45   1      }
   46          
   47          void Set_PWM(double Ua, double Ub, double Uc)
   48          {
   49   1          DC_a = _constrain(Ua/voltage_power_supply, 0.0f, 1.0f);
   50   1          DC_b = _constrain(Ub/voltage_power_supply, 0.0f, 1.0f);
   51   1          DC_c = _constrain(Uc/voltage_power_supply, 0.0f, 1.0f);
   52   1      
   53   1          Set_PWM_Duty(0, (unsigned char)(DC_a * 100));
   54   1          Set_PWM_Duty(1, (unsigned char)(DC_b * 100));
   55   1          Set_PWM_Duty(2, (unsigned char)(DC_c * 100));
C251 COMPILER V5.60.0,  FOC_Controller                                                     01/03/25  15:57:30  PAGE 2   

   56   1      }
   57          
   58          void OutPutter(double Uq, double Ud, double angle_elsped) //UdÊöÇÊó∂‰∏çÁü•ÈÅì2333ÔºåË≤å‰ººÂΩ±Âìç‰∏çÂ§ßÔºå
             -‰ΩÜÊòØÁïôÁùÄ.UqÊòØ‰∏ªË¶ÅÁöÑÔºåUdÁõ¥ËΩ¥ÁîµÂéãÔºå‰ªÄ‰πàÔºü‰∏∫‰ªÄ‰πàÂè´_elsped?LOL LUA
   59          {
   60   1          double angle_el;
   61   1          angle_el = _normalizeAngle(angle_elsped + Initial_Angle);
   62   1      
   63   1          /* ParkÂèòÊç¢ */
   64   1          Ualpha = -Uq * sin(angle_el) + Ud * cos(angle_el); 
   65   1          Ubeta = Uq * cos(angle_el) + Ud * sin(angle_el); 
   66   1      
   67   1          /* Anti-ClarkeÂèòÊç¢ */
   68   1          Ua = Ualpha + voltage_power_supply/2; //ÁîµÂéãË¢´Âπ≥ÁßªÂà∞‰∏≠Èó¥ÂéªÁé©
   69   1          Ub = (sqrt(3)*Ubeta-Ualpha)/2 + voltage_power_supply/2;
   70   1          Uc = (-Ualpha-sqrt(3)*Ubeta)/2 + voltage_power_supply/2;
   71   1          
   72   1          Set_PWM(Ua,Ub,Uc); //ËøòÊòØÂú®ËøôÈáåÂÅöËΩ¨ÂåñÂêß
   73   1      }
   74          
   75          double velocityOpenloop(double target_velocity) //finally...
   76          {
   77   1          /* ‰ΩøÁî®Êó©ÂâçËÆæÁΩÆÁöÑvoltage_power_supplyÁöÑ1/3‰Ωú‰∏∫UqÂÄºÔºåËøô‰∏™ÂÄº‰ºöÁõ¥Êé•ÂΩ±ÂìçËæìÂá∫ÂäõÁü©
   78   1          ÊúÄÂ§ßÂè™ËÉΩËÆæÁΩÆ‰∏∫Uq = voltage_power_supply/2ÔºåÂê¶Âàôua,ub,uc‰ºöË∂ÖÂá∫‰æõÁîµÁîµÂéãÈôêÂπÖ */
   79   1          Uq = voltage_power_supply/3;
   80   1      
   81   1          Shaft_Angle = _normalizeAngle(Shaft_Angle + target_velocity*Ts); //ÂºÄÁéØÊéßÂà∂ÔºåËΩØ‰ª∂++
   82   1      
   83   1          OutPutter(Uq, 0.0, _electric_Angle(Shaft_Angle, 1));
   84   1          return Uq;
   85   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       656     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        56         20
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        24     ------
End of Module Information.


C251 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
