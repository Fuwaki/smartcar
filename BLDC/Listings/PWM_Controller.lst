C251 COMPILER V5.60.0,  PWM_Controller                                                     27/02/25  15:35:13  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE PWM_Controller
OBJECT MODULE PLACED IN .\Objects\PWM_Controller.obj
COMPILER INVOKED BY: D:\mcu\Keil5\C251\BIN\C251.EXE PWM_Controller.c INTR2 BROWSE DEBUG PRINT(.\Listings\PWM_Controller.
                    -lst) OBJECT(.\Objects\PWM_Controller.obj) 

stmt  level    source

    1          #include <AI8051U.H>
    2          #include <intrins.h>
    3          
    4          #define FOSC 12000000L
    5          #define PWM_FREQ 50
    6          #define PWM_CYCLE 100
    7          #define TIMER_RELOAD (256 - ((FOSC/12) / (PWM_FREQ * PWM_CYCLE))) //pretty well, isn't it?
    8          
    9          unsigned char PWM_DUTY0;
   10          unsigned char PWM_DUTY1;
   11          unsigned char PWM_DUTY2;
   12          unsigned char PWM_DUTY3;
   13          
   14          unsigned char PWM_EN0;
   15          unsigned char PWM_EN1;
   16          unsigned char PWM_EN2;
   17          unsigned char PWM_EN3;
   18          
   19          static unsigned char pwm_count = 0;
   20          
   21          void PWM_Init(void) //use this if you want to FK the PWM controller
   22          {
   23   1          TMOD &= 0xF0;
   24   1          TMOD |= 0x02;
   25   1          TH0 = TIMER_RELOAD;//??
   26   1          TL0 = TIMER_RELOAD;
   27   1          ET0 = 1;
   28   1          TR0 = 1;
   29   1          EA = 1;
   30   1      }
   31          
   32          typedef struct //没想好，上课去了lol
   33          {
   34              unsigned char pwm;
   35              unsigned char dir;
   36          } PWM_Controller;
   37          
   38          void Timer0_ISR(void) interrupt 1
   39          {
   40   1          pwm_count++;
   41   1      
   42   1          if(pwm_count >= PWM_CYCLE)
   43   1          {
   44   2              pwm_count = 0;
   45   2          }
   46   1      
   47   1          if (pwm_count < PWM_DUTY0)
   48   1          {
   49   2              PWM_EN0 = 1;
   50   2          }
   51   1          else
   52   1          {
   53   2              PWM_EN0 = 0;
   54   2          }
   55   1      
   56   1          if (pwm_count < PWM_DUTY1)
   57   1          {
   58   2              PWM_EN1 = 1;
C251 COMPILER V5.60.0,  PWM_Controller                                                     27/02/25  15:35:13  PAGE 2   

   59   2          }
   60   1          else
   61   1          {
   62   2              PWM_EN1 = 0;
   63   2          }
   64   1      
   65   1          if (pwm_count < PWM_DUTY2)
   66   1          {
   67   2              PWM_EN2 = 1;
   68   2          }
   69   1          else
   70   1          {
   71   2              PWM_EN2 = 0;
   72   2          }
   73   1      
   74   1          if (pwm_count < PWM_DUTY3)
   75   1          {
   76   2              PWM_EN3 = 1;
   77   2          }
   78   1          else
   79   1          {
   80   2              PWM_EN3 = 0;
   81   2          }
   82   1      }
   83          
   84          void Set_PWM_Duty(unsigned char num, unsigned char duty)
   85          {
   86   1              switch(num)
   87   1              {
   88   2                      case 0:
   89   2                              PWM_DUTY0 = duty;
   90   2                              break;
   91   2                      case 1:
   92   2                              PWM_DUTY1 = duty;
   93   2                              break;
   94   2                      case 2:
   95   2                              PWM_DUTY2 = duty;
   96   2                              break;
   97   2                      case 3:
   98   2                              PWM_DUTY3 = duty;
   99   2                              break;
  100   2              }
  101   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       137     ------
  ecode size           =    ------     ------
  data size            =         9     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
